// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

`include "caliptra_sva.svh"

module I3CCSR (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [11:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input I3CCSR_pkg::I3CCSR__in_t hwif_in,
        output I3CCSR_pkg::I3CCSR__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            logic HCI_VERSION;
            logic HC_CONTROL;
            logic CONTROLLER_DEVICE_ADDR;
            logic HC_CAPABILITIES;
            logic RESET_CONTROL;
            logic PRESENT_STATE;
            logic INTR_STATUS;
            logic INTR_STATUS_ENABLE;
            logic INTR_SIGNAL_ENABLE;
            logic INTR_FORCE;
            logic DAT_SECTION_OFFSET;
            logic DCT_SECTION_OFFSET;
            logic RING_HEADERS_SECTION_OFFSET;
            logic PIO_SECTION_OFFSET;
            logic EXT_CAPS_SECTION_OFFSET;
            logic INT_CTRL_CMDS_EN;
            logic IBI_NOTIFY_CTRL;
            logic IBI_DATA_ABORT_CTRL;
            logic DEV_CTX_BASE_LO;
            logic DEV_CTX_BASE_HI;
            logic DEV_CTX_SG;
        } I3CBase;
        struct packed{
            logic COMMAND_PORT;
            logic RESPONSE_PORT;
            logic TX_DATA_PORT;
            logic RX_DATA_PORT;
            logic IBI_PORT;
            logic QUEUE_THLD_CTRL;
            logic DATA_BUFFER_THLD_CTRL;
            logic QUEUE_SIZE;
            logic ALT_QUEUE_SIZE;
            logic PIO_INTR_STATUS;
            logic PIO_INTR_STATUS_ENABLE;
            logic PIO_INTR_SIGNAL_ENABLE;
            logic PIO_INTR_FORCE;
            logic PIO_CONTROL;
        } PIOControl;
        struct packed{
            struct packed{
                logic EXTCAP_HEADER;
                logic PROT_CAP_0;
                logic PROT_CAP_1;
                logic PROT_CAP_2;
                logic PROT_CAP_3;
                logic DEVICE_ID_0;
                logic DEVICE_ID_1;
                logic DEVICE_ID_2;
                logic DEVICE_ID_3;
                logic DEVICE_ID_4;
                logic DEVICE_ID_5;
                logic DEVICE_ID_6;
                logic DEVICE_STATUS_0;
                logic DEVICE_STATUS_1;
                logic DEVICE_RESET;
                logic RECOVERY_CTRL;
                logic RECOVERY_STATUS;
                logic HW_STATUS;
                logic INDIRECT_FIFO_CTRL_0;
                logic INDIRECT_FIFO_CTRL_1;
                logic INDIRECT_FIFO_STATUS_0;
                logic INDIRECT_FIFO_STATUS_1;
                logic INDIRECT_FIFO_STATUS_2;
                logic INDIRECT_FIFO_STATUS_3;
                logic INDIRECT_FIFO_STATUS_4;
                logic INDIRECT_FIFO_STATUS_5;
                logic INDIRECT_FIFO_DATA;
            } SecFwRecoveryIf;
            struct packed{
                logic EXTCAP_HEADER;
                logic STBY_CR_CONTROL;
                logic STBY_CR_DEVICE_ADDR;
                logic STBY_CR_CAPABILITIES;
                logic __rsvd_0;
                logic STBY_CR_STATUS;
                logic STBY_CR_DEVICE_CHAR;
                logic STBY_CR_DEVICE_PID_LO;
                logic STBY_CR_INTR_STATUS;
                logic __rsvd_1;
                logic STBY_CR_INTR_SIGNAL_ENABLE;
                logic STBY_CR_INTR_FORCE;
                logic STBY_CR_CCC_CONFIG_GETCAPS;
                logic STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                logic __rsvd_2;
                logic __rsvd_3;
            } StdbyCtrlMode;
            struct packed{
                logic EXTCAP_HEADER;
                logic CONTROL;
                logic STATUS;
                logic RESET_CONTROL;
                logic INTERRUPT_STATUS;
                logic INTERRUPT_ENABLE;
                logic INTERRUPT_FORCE;
                logic RX_DESC_QUEUE_PORT;
                logic RX_DATA_PORT;
                logic TX_DESC_QUEUE_PORT;
                logic TX_DATA_PORT;
                logic IBI_PORT;
                logic QUEUE_SIZE;
                logic IBI_QUEUE_SIZE;
                logic QUEUE_THLD_CTRL;
                logic DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct packed{
                logic EXTCAP_HEADER;
                logic SOC_MGMT_CONTROL;
                logic SOC_MGMT_STATUS;
                logic SOC_MGMT_RSVD_0;
                logic SOC_MGMT_RSVD_1;
                logic SOC_MGMT_RSVD_2;
                logic SOC_MGMT_RSVD_3;
                logic SOC_PAD_CONF;
                logic SOC_PAD_ATTR;
                logic SOC_MGMT_FEATURE_2;
                logic SOC_MGMT_FEATURE_3;
                logic T_R_REG;
                logic T_F_REG;
                logic T_SU_DAT_REG;
                logic T_HD_DAT_REG;
                logic T_HIGH_REG;
                logic T_LOW_REG;
                logic T_HD_STA_REG;
                logic T_SU_STA_REG;
                logic T_SU_STO_REG;
                logic T_FREE_REG;
                logic T_AVAL_REG;
                logic T_IDLE_REG;
            } SoCMgmtIf;
            struct packed{
                logic EXTCAP_HEADER;
                logic CONTROLLER_CONFIG;
            } CtrlCfg;
            logic TERMINATION_EXTCAP_HEADER;
        } I3C_EC;
        logic DAT;
        logic DCT;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [11:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.I3CBase.HCI_VERSION = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.I3CBase.HC_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h4);
        decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR = cpuif_req_masked & (cpuif_addr == 12'h8);
        decoded_reg_strb.I3CBase.HC_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 12'hc);
        decoded_reg_strb.I3CBase.RESET_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h10);
        decoded_reg_strb.I3CBase.PRESENT_STATE = cpuif_req_masked & (cpuif_addr == 12'h14);
        decoded_reg_strb.I3CBase.INTR_STATUS = cpuif_req_masked & (cpuif_addr == 12'h20);
        decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h24);
        decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h28);
        decoded_reg_strb.I3CBase.INTR_FORCE = cpuif_req_masked & (cpuif_addr == 12'h2c);
        decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h30);
        decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h34);
        decoded_reg_strb.I3CBase.RING_HEADERS_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h38);
        decoded_reg_strb.I3CBase.PIO_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h3c);
        decoded_reg_strb.I3CBase.EXT_CAPS_SECTION_OFFSET = cpuif_req_masked & (cpuif_addr == 12'h40);
        decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN = cpuif_req_masked & (cpuif_addr == 12'h4c);
        decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL = cpuif_req_masked & (cpuif_addr == 12'h58);
        decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL = cpuif_req_masked & (cpuif_addr == 12'h5c);
        decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO = cpuif_req_masked & (cpuif_addr == 12'h60);
        decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI = cpuif_req_masked & (cpuif_addr == 12'h64);
        decoded_reg_strb.I3CBase.DEV_CTX_SG = cpuif_req_masked & (cpuif_addr == 12'h68);
        decoded_reg_strb.PIOControl.COMMAND_PORT = cpuif_req_masked & (cpuif_addr == 12'h80);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h80) & cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.RESPONSE_PORT = cpuif_req_masked & (cpuif_addr == 12'h84);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h84) & !cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.TX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 12'h88);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h88) & cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.RX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 12'h88);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h88) & !cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.IBI_PORT = cpuif_req_masked & (cpuif_addr == 12'h8c);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h8c) & !cpuif_req_is_wr;
        decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h90);
        decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h94);
        decoded_reg_strb.PIOControl.QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h98);
        decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h9c);
        decoded_reg_strb.PIOControl.PIO_INTR_STATUS = cpuif_req_masked & (cpuif_addr == 12'ha0);
        decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE = cpuif_req_masked & (cpuif_addr == 12'ha4);
        decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 12'ha8);
        decoded_reg_strb.PIOControl.PIO_INTR_FORCE = cpuif_req_masked & (cpuif_addr == 12'hac);
        decoded_reg_strb.PIOControl.PIO_CONTROL = cpuif_req_masked & (cpuif_addr == 12'hb0);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h100);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_0 = cpuif_req_masked & (cpuif_addr == 12'h104);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_1 = cpuif_req_masked & (cpuif_addr == 12'h108);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 = cpuif_req_masked & (cpuif_addr == 12'h10c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 = cpuif_req_masked & (cpuif_addr == 12'h110);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 = cpuif_req_masked & (cpuif_addr == 12'h114);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 = cpuif_req_masked & (cpuif_addr == 12'h118);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 = cpuif_req_masked & (cpuif_addr == 12'h11c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 = cpuif_req_masked & (cpuif_addr == 12'h120);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 = cpuif_req_masked & (cpuif_addr == 12'h124);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 = cpuif_req_masked & (cpuif_addr == 12'h128);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6 = cpuif_req_masked & (cpuif_addr == 12'h12c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 = cpuif_req_masked & (cpuif_addr == 12'h130);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 = cpuif_req_masked & (cpuif_addr == 12'h134);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET = cpuif_req_masked & (cpuif_addr == 12'h138);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL = cpuif_req_masked & (cpuif_addr == 12'h13c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS = cpuif_req_masked & (cpuif_addr == 12'h140);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS = cpuif_req_masked & (cpuif_addr == 12'h144);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 = cpuif_req_masked & (cpuif_addr == 12'h148);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 = cpuif_req_masked & (cpuif_addr == 12'h14c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 = cpuif_req_masked & (cpuif_addr == 12'h150);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1 = cpuif_req_masked & (cpuif_addr == 12'h154);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2 = cpuif_req_masked & (cpuif_addr == 12'h158);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3 = cpuif_req_masked & (cpuif_addr == 12'h15c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4 = cpuif_req_masked & (cpuif_addr == 12'h160);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5 = cpuif_req_masked & (cpuif_addr == 12'h164);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA = cpuif_req_masked & (cpuif_addr == 12'h168);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h180);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h184);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR = cpuif_req_masked & (cpuif_addr == 12'h188);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 12'h18c);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_0 = cpuif_req_masked & (cpuif_addr == 12'h190);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS = cpuif_req_masked & (cpuif_addr == 12'h194);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR = cpuif_req_masked & (cpuif_addr == 12'h198);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO = cpuif_req_masked & (cpuif_addr == 12'h19c);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS = cpuif_req_masked & (cpuif_addr == 12'h1a0);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_1 = cpuif_req_masked & (cpuif_addr == 12'h1a4);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h1a8);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE = cpuif_req_masked & (cpuif_addr == 12'h1ac);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS = cpuif_req_masked & (cpuif_addr == 12'h1b0);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS = cpuif_req_masked & (cpuif_addr == 12'h1b4);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_2 = cpuif_req_masked & (cpuif_addr == 12'h1b8);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 = cpuif_req_masked & (cpuif_addr == 12'h1bc);
        decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h1c0);
        decoded_reg_strb.I3C_EC.TTI.CONTROL = cpuif_req_masked & (cpuif_addr == 12'h1c4);
        decoded_reg_strb.I3C_EC.TTI.STATUS = cpuif_req_masked & (cpuif_addr == 12'h1c8);
        decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h1cc);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS = cpuif_req_masked & (cpuif_addr == 12'h1d0);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE = cpuif_req_masked & (cpuif_addr == 12'h1d4);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE = cpuif_req_masked & (cpuif_addr == 12'h1d8);
        decoded_reg_strb.I3C_EC.TTI.RX_DESC_QUEUE_PORT = cpuif_req_masked & (cpuif_addr == 12'h1dc);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h1dc) & !cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.RX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 12'h1e0);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h1e0) & !cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.TX_DESC_QUEUE_PORT = cpuif_req_masked & (cpuif_addr == 12'h1e4);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h1e4) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.TX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 12'h1e8);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h1e8) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.IBI_PORT = cpuif_req_masked & (cpuif_addr == 12'h1ec);
        is_external |= cpuif_req_masked & (cpuif_addr == 12'h1ec) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h1f0);
        decoded_reg_strb.I3C_EC.TTI.IBI_QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 12'h1f4);
        decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h1f8);
        decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 12'h1fc);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h200);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL = cpuif_req_masked & (cpuif_addr == 12'h204);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS = cpuif_req_masked & (cpuif_addr == 12'h208);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0 = cpuif_req_masked & (cpuif_addr == 12'h20c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1 = cpuif_req_masked & (cpuif_addr == 12'h210);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 = cpuif_req_masked & (cpuif_addr == 12'h214);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 = cpuif_req_masked & (cpuif_addr == 12'h218);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF = cpuif_req_masked & (cpuif_addr == 12'h21c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR = cpuif_req_masked & (cpuif_addr == 12'h220);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 = cpuif_req_masked & (cpuif_addr == 12'h224);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 = cpuif_req_masked & (cpuif_addr == 12'h228);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG = cpuif_req_masked & (cpuif_addr == 12'h22c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG = cpuif_req_masked & (cpuif_addr == 12'h230);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG = cpuif_req_masked & (cpuif_addr == 12'h234);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG = cpuif_req_masked & (cpuif_addr == 12'h238);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG = cpuif_req_masked & (cpuif_addr == 12'h23c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG = cpuif_req_masked & (cpuif_addr == 12'h240);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG = cpuif_req_masked & (cpuif_addr == 12'h244);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG = cpuif_req_masked & (cpuif_addr == 12'h248);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG = cpuif_req_masked & (cpuif_addr == 12'h24c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG = cpuif_req_masked & (cpuif_addr == 12'h250);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG = cpuif_req_masked & (cpuif_addr == 12'h254);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG = cpuif_req_masked & (cpuif_addr == 12'h258);
        decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h260);
        decoded_reg_strb.I3C_EC.CtrlCfg.CONTROLLER_CONFIG = cpuif_req_masked & (cpuif_addr == 12'h264);
        decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 12'h268);
        decoded_reg_strb.DAT = cpuif_req_masked & (cpuif_addr >= 12'h400) & (cpuif_addr <= 12'h400 + 12'h3ff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'h400) & (cpuif_addr <= 12'h400 + 12'h3ff);
        decoded_reg_strb.DCT = cpuif_req_masked & (cpuif_addr >= 12'h800) & (cpuif_addr <= 12'h800 + 12'h7ff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 12'h800) & (cpuif_addr <= 12'h800 + 12'h7ff);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } IBA_INCLUDE;
                struct packed{
                    logic next;
                    logic load_next;
                } I2C_DEV_PRESENT;
                struct packed{
                    logic next;
                    logic load_next;
                } HOT_JOIN_CTRL;
                struct packed{
                    logic next;
                    logic load_next;
                } HALT_ON_CMD_SEQ_TIMEOUT;
                struct packed{
                    logic next;
                    logic load_next;
                } ABORT;
                struct packed{
                    logic next;
                    logic load_next;
                } RESUME;
                struct packed{
                    logic next;
                    logic load_next;
                } BUS_ENABLE;
            } HC_CONTROL;
            struct packed{
                struct packed{
                    logic [6:0] next;
                    logic load_next;
                } DYNAMIC_ADDR;
                struct packed{
                    logic next;
                    logic load_next;
                } DYNAMIC_ADDR_VALID;
            } CONTROLLER_DEVICE_ADDR;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } SOFT_RST;
                struct packed{
                    logic next;
                    logic load_next;
                } CMD_QUEUE_RST;
                struct packed{
                    logic next;
                    logic load_next;
                } RESP_QUEUE_RST;
                struct packed{
                    logic next;
                    logic load_next;
                } TX_FIFO_RST;
                struct packed{
                    logic next;
                    logic load_next;
                } RX_FIFO_RST;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_QUEUE_RST;
            } RESET_CONTROL;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } HC_INTERNAL_ERR_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_SEQ_CANCEL_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_WARN_CMD_SEQ_STALL_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_ERR_CMD_SEQ_TIMEOUT_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } SCHED_CMD_MISSED_TICK_STAT;
            } INTR_STATUS;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } HC_INTERNAL_ERR_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_SEQ_CANCEL_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_WARN_CMD_SEQ_STALL_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } SCHED_CMD_MISSED_TICK_STAT_EN;
            } INTR_STATUS_ENABLE;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } HC_INTERNAL_ERR_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_SEQ_CANCEL_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_WARN_CMD_SEQ_STALL_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } SCHED_CMD_MISSED_TICK_SIGNAL_EN;
            } INTR_SIGNAL_ENABLE;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } HC_INTERNAL_ERR_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_SEQ_CANCEL_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_WARN_CMD_SEQ_STALL_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } HC_ERR_CMD_SEQ_TIMEOUT_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } SCHED_CMD_MISSED_TICK_FORCE;
            } INTR_FORCE;
            struct packed{
                struct packed{
                    logic [4:0] next;
                    logic load_next;
                } TABLE_INDEX;
            } DCT_SECTION_OFFSET;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } NOTIFY_HJ_REJECTED;
                struct packed{
                    logic next;
                    logic load_next;
                } NOTIFY_CRR_REJECTED;
                struct packed{
                    logic next;
                    logic load_next;
                } NOTIFY_IBI_REJECTED;
            } IBI_NOTIFY_CTRL;
            struct packed{
                struct packed{
                    logic [7:0] next;
                    logic load_next;
                } MATCH_IBI_ID;
                struct packed{
                    logic [1:0] next;
                    logic load_next;
                } AFTER_N_CHUNKS;
                struct packed{
                    logic [2:0] next;
                    logic load_next;
                } MATCH_STATUS_TYPE;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_DATA_ABORT_MON;
            } IBI_DATA_ABORT_CTRL;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } BASE_LO;
            } DEV_CTX_BASE_LO;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } BASE_HI;
            } DEV_CTX_BASE_HI;
        } I3CBase;
        struct packed{
            struct packed{
                struct packed{
                    logic [7:0] next;
                    logic load_next;
                } CMD_EMPTY_BUF_THLD;
                struct packed{
                    logic [7:0] next;
                    logic load_next;
                } RESP_BUF_THLD;
                struct packed{
                    logic [7:0] next;
                    logic load_next;
                } IBI_DATA_SEGMENT_SIZE;
                struct packed{
                    logic [7:0] next;
                    logic load_next;
                } IBI_STATUS_THLD;
            } QUEUE_THLD_CTRL;
            struct packed{
                struct packed{
                    logic [2:0] next;
                    logic load_next;
                } TX_BUF_THLD;
                struct packed{
                    logic [2:0] next;
                    logic load_next;
                } RX_BUF_THLD;
                struct packed{
                    logic [2:0] next;
                    logic load_next;
                } TX_START_THLD;
                struct packed{
                    logic [2:0] next;
                    logic load_next;
                } RX_START_THLD;
            } DATA_BUFFER_THLD_CTRL;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } TX_THLD_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } RX_THLD_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_STATUS_THLD_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } CMD_QUEUE_READY_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } RESP_READY_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ABORT_STAT;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ERR_STAT;
            } PIO_INTR_STATUS;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } TX_THLD_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } RX_THLD_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_STATUS_THLD_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } CMD_QUEUE_READY_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } RESP_READY_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ABORT_STAT_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ERR_STAT_EN;
            } PIO_INTR_STATUS_ENABLE;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } TX_THLD_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } RX_THLD_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_STATUS_THLD_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } CMD_QUEUE_READY_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } RESP_READY_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ABORT_SIGNAL_EN;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ERR_SIGNAL_EN;
            } PIO_INTR_SIGNAL_ENABLE;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } TX_THLD_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } RX_THLD_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } IBI_THLD_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } CMD_QUEUE_READY_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } RESP_READY_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ABORT_FORCE;
                struct packed{
                    logic next;
                    logic load_next;
                } TRANSFER_ERR_FORCE;
            } PIO_INTR_FORCE;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } ENABLE;
                struct packed{
                    logic next;
                    logic load_next;
                } RS;
                struct packed{
                    logic next;
                    logic load_next;
                } ABORT;
            } PIO_CONTROL;
        } PIOControl;
        struct packed{
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } PROT_CAP_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } PROT_CAP_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } PROT_CAP_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } PROT_CAP_3;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_3;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_4;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_5;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_ID_6;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_STATUS_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_STATUS_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } DEVICE_RESET;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } RECOVERY_CTRL;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } RECOVERY_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } HW_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_CTRL_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_CTRL_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_3;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_4;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_5;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_DATA;
            } SecFwRecoveryIf;
            struct packed{
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } PENDING_RX_NACK;
                    struct packed{
                        logic next;
                        logic load_next;
                    } HANDOFF_DELAY_NACK;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_FSM_OP_SELECT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } PRIME_ACCEPT_GETACCCR;
                    struct packed{
                        logic next;
                        logic load_next;
                    } HANDOFF_DEEP_SLEEP;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CR_REQUEST_SEND;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } BAST_CCC_IBI_RING;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TARGET_XACT_ENABLE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_SETAASA_ENABLE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_SETDASA_ENABLE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_ENTDAA_ENABLE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RSTACT_DEFBYTE_02;
                    struct packed{
                        logic [1:0] next;
                        logic load_next;
                    } STBY_CR_ENABLE_INIT;
                } STBY_CR_CONTROL;
                struct packed{
                    struct packed{
                        logic [6:0] next;
                        logic load_next;
                    } STATIC_ADDR;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STATIC_ADDR_VALID;
                    struct packed{
                        logic [6:0] next;
                        logic load_next;
                    } DYNAMIC_ADDR;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DYNAMIC_ADDR_VALID;
                } STBY_CR_DEVICE_ADDR;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } SIMPLE_CRR_SUPPORT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TARGET_XACT_SUPPORT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_SETAASA_SUPPORT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_SETDASA_SUPPORT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } DAA_ENTDAA_SUPPORT;
                } STBY_CR_CAPABILITIES;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } __rsvd;
                } __rsvd_0;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } AC_CURRENT_OWN;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } SIMPLE_CRR_STATUS;
                    struct packed{
                        logic next;
                        logic load_next;
                    } HJ_REQ_STATUS;
                } STBY_CR_STATUS;
                struct packed{
                    struct packed{
                        logic [14:0] next;
                        logic load_next;
                    } PID_HI;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } DCR;
                    struct packed{
                        logic [4:0] next;
                        logic load_next;
                    } BCR_VAR;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } BCR_FIXED;
                } STBY_CR_DEVICE_CHAR;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PID_LO;
                } STBY_CR_DEVICE_PID_LO;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_REMAIN_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_PRIMED_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_FAIL_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_M3_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_STAT;
                } STBY_CR_INTR_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } __rsvd;
                } __rsvd_1;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_M3_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_SIGNAL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
                } STBY_CR_INTR_SIGNAL_ENABLE;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_FORCE;
                } STBY_CR_INTR_FORCE;
                struct packed{
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } F2_CRCAP1_BUS_CONFIG;
                    struct packed{
                        logic [3:0] next;
                        logic load_next;
                    } F2_CRCAP2_DEV_INTERACT;
                } STBY_CR_CCC_CONFIG_GETCAPS;
                struct packed{
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } RST_ACTION;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } RESET_TIME_PERIPHERAL;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } RESET_TIME_TARGET;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RESET_DYNAMIC_ADDR;
                } STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } __rsvd;
                } __rsvd_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } __rsvd;
                } __rsvd_3;
            } StdbyCtrlMode;
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } CONTROL;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } STATUS;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } SOFT_RST;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_RST;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_RST;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DATA_RST;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DATA_RST;
                    struct packed{
                        logic next;
                        logic load_next;
                    } IBI_QUEUE_RST;
                } RESET_CONTROL;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_TIMEOUT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_TIMEOUT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } IBI_THLD_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TRANSFER_ABORT_STAT;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TRANSFER_ERR_STAT;
                } INTERRUPT_STATUS;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_STAT_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_STAT_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_STAT_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_STAT_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } IBI_THLD_STAT_EN;
                } INTERRUPT_ENABLE;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_FORCE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } IBI_THLD_FORCE;
                } INTERRUPT_FORCE;
                struct packed{
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } TX_DESC_THLD;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } RX_DESC_THLD;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } IBI_THLD;
                } QUEUE_THLD_CTRL;
                struct packed{
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } TX_DATA_THLD;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } RX_DATA_THLD;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } TX_START_THLD;
                    struct packed{
                        logic [2:0] next;
                        logic load_next;
                    } RX_START_THLD;
                } DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_CONTROL;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_0;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_1;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_3;
                struct packed{
                    struct packed{
                        logic next;
                        logic load_next;
                    } INPUT_ENABLE;
                    struct packed{
                        logic next;
                        logic load_next;
                    } SCHMITT_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } KEEPER_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } PULL_DIR;
                    struct packed{
                        logic next;
                        logic load_next;
                    } PULL_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } IO_INVERSION;
                    struct packed{
                        logic next;
                        logic load_next;
                    } OD_EN;
                    struct packed{
                        logic next;
                        logic load_next;
                    } VIRTUAL_OD_EN;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } PAD_TYPE;
                } SOC_PAD_CONF;
                struct packed{
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } DRIVE_SLEW_RATE;
                    struct packed{
                        logic [7:0] next;
                        logic load_next;
                    } DRIVE_STRENGTH;
                } SOC_PAD_ATTR;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_2;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_3;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_R;
                } T_R_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_F;
                } T_F_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_DAT;
                } T_SU_DAT_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_HD_DAT;
                } T_HD_DAT_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_HIGH;
                } T_HIGH_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_LOW;
                } T_LOW_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_HD_STA;
                } T_HD_STA_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_STA;
                } T_SU_STA_REG;
                struct packed{
                    struct packed{
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_STO;
                } T_SU_STO_REG;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } T_FREE;
                } T_FREE_REG;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } T_AVAL;
                } T_AVAL_REG;
                struct packed{
                    struct packed{
                        logic [31:0] next;
                        logic load_next;
                    } T_IDLE;
                } T_IDLE_REG;
            } SoCMgmtIf;
            struct packed{
                struct packed{
                    struct packed{
                        logic [1:0] next;
                        logic load_next;
                    } OPERATION_MODE;
                } CONTROLLER_CONFIG;
            } CtrlCfg;
        } I3C_EC;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } IBA_INCLUDE;
                struct packed{
                    logic value;
                } I2C_DEV_PRESENT;
                struct packed{
                    logic value;
                } HOT_JOIN_CTRL;
                struct packed{
                    logic value;
                } HALT_ON_CMD_SEQ_TIMEOUT;
                struct packed{
                    logic value;
                } ABORT;
                struct packed{
                    logic value;
                } RESUME;
                struct packed{
                    logic value;
                } BUS_ENABLE;
            } HC_CONTROL;
            struct packed{
                struct packed{
                    logic [6:0] value;
                } DYNAMIC_ADDR;
                struct packed{
                    logic value;
                } DYNAMIC_ADDR_VALID;
            } CONTROLLER_DEVICE_ADDR;
            struct packed{
                struct packed{
                    logic value;
                } SOFT_RST;
                struct packed{
                    logic value;
                } CMD_QUEUE_RST;
                struct packed{
                    logic value;
                } RESP_QUEUE_RST;
                struct packed{
                    logic value;
                } TX_FIFO_RST;
                struct packed{
                    logic value;
                } RX_FIFO_RST;
                struct packed{
                    logic value;
                } IBI_QUEUE_RST;
            } RESET_CONTROL;
            struct packed{
                struct packed{
                    logic value;
                } HC_INTERNAL_ERR_STAT;
                struct packed{
                    logic value;
                } HC_SEQ_CANCEL_STAT;
                struct packed{
                    logic value;
                } HC_WARN_CMD_SEQ_STALL_STAT;
                struct packed{
                    logic value;
                } HC_ERR_CMD_SEQ_TIMEOUT_STAT;
                struct packed{
                    logic value;
                } SCHED_CMD_MISSED_TICK_STAT;
            } INTR_STATUS;
            struct packed{
                struct packed{
                    logic value;
                } HC_INTERNAL_ERR_STAT_EN;
                struct packed{
                    logic value;
                } HC_SEQ_CANCEL_STAT_EN;
                struct packed{
                    logic value;
                } HC_WARN_CMD_SEQ_STALL_STAT_EN;
                struct packed{
                    logic value;
                } HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN;
                struct packed{
                    logic value;
                } SCHED_CMD_MISSED_TICK_STAT_EN;
            } INTR_STATUS_ENABLE;
            struct packed{
                struct packed{
                    logic value;
                } HC_INTERNAL_ERR_SIGNAL_EN;
                struct packed{
                    logic value;
                } HC_SEQ_CANCEL_SIGNAL_EN;
                struct packed{
                    logic value;
                } HC_WARN_CMD_SEQ_STALL_SIGNAL_EN;
                struct packed{
                    logic value;
                } HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN;
                struct packed{
                    logic value;
                } SCHED_CMD_MISSED_TICK_SIGNAL_EN;
            } INTR_SIGNAL_ENABLE;
            struct packed{
                struct packed{
                    logic value;
                } HC_INTERNAL_ERR_FORCE;
                struct packed{
                    logic value;
                } HC_SEQ_CANCEL_FORCE;
                struct packed{
                    logic value;
                } HC_WARN_CMD_SEQ_STALL_FORCE;
                struct packed{
                    logic value;
                } HC_ERR_CMD_SEQ_TIMEOUT_FORCE;
                struct packed{
                    logic value;
                } SCHED_CMD_MISSED_TICK_FORCE;
            } INTR_FORCE;
            struct packed{
                struct packed{
                    logic [4:0] value;
                } TABLE_INDEX;
            } DCT_SECTION_OFFSET;
            struct packed{
                struct packed{
                    logic value;
                } NOTIFY_HJ_REJECTED;
                struct packed{
                    logic value;
                } NOTIFY_CRR_REJECTED;
                struct packed{
                    logic value;
                } NOTIFY_IBI_REJECTED;
            } IBI_NOTIFY_CTRL;
            struct packed{
                struct packed{
                    logic [7:0] value;
                } MATCH_IBI_ID;
                struct packed{
                    logic [1:0] value;
                } AFTER_N_CHUNKS;
                struct packed{
                    logic [2:0] value;
                } MATCH_STATUS_TYPE;
                struct packed{
                    logic value;
                } IBI_DATA_ABORT_MON;
            } IBI_DATA_ABORT_CTRL;
            struct packed{
                struct packed{
                    logic value;
                } BASE_LO;
            } DEV_CTX_BASE_LO;
            struct packed{
                struct packed{
                    logic value;
                } BASE_HI;
            } DEV_CTX_BASE_HI;
        } I3CBase;
        struct packed{
            struct packed{
                struct packed{
                    logic [7:0] value;
                } CMD_EMPTY_BUF_THLD;
                struct packed{
                    logic [7:0] value;
                } RESP_BUF_THLD;
                struct packed{
                    logic [7:0] value;
                } IBI_DATA_SEGMENT_SIZE;
                struct packed{
                    logic [7:0] value;
                } IBI_STATUS_THLD;
            } QUEUE_THLD_CTRL;
            struct packed{
                struct packed{
                    logic [2:0] value;
                } TX_BUF_THLD;
                struct packed{
                    logic [2:0] value;
                } RX_BUF_THLD;
                struct packed{
                    logic [2:0] value;
                } TX_START_THLD;
                struct packed{
                    logic [2:0] value;
                } RX_START_THLD;
            } DATA_BUFFER_THLD_CTRL;
            struct packed{
                struct packed{
                    logic value;
                } TX_THLD_STAT;
                struct packed{
                    logic value;
                } RX_THLD_STAT;
                struct packed{
                    logic value;
                } IBI_STATUS_THLD_STAT;
                struct packed{
                    logic value;
                } CMD_QUEUE_READY_STAT;
                struct packed{
                    logic value;
                } RESP_READY_STAT;
                struct packed{
                    logic value;
                } TRANSFER_ABORT_STAT;
                struct packed{
                    logic value;
                } TRANSFER_ERR_STAT;
            } PIO_INTR_STATUS;
            struct packed{
                struct packed{
                    logic value;
                } TX_THLD_STAT_EN;
                struct packed{
                    logic value;
                } RX_THLD_STAT_EN;
                struct packed{
                    logic value;
                } IBI_STATUS_THLD_STAT_EN;
                struct packed{
                    logic value;
                } CMD_QUEUE_READY_STAT_EN;
                struct packed{
                    logic value;
                } RESP_READY_STAT_EN;
                struct packed{
                    logic value;
                } TRANSFER_ABORT_STAT_EN;
                struct packed{
                    logic value;
                } TRANSFER_ERR_STAT_EN;
            } PIO_INTR_STATUS_ENABLE;
            struct packed{
                struct packed{
                    logic value;
                } TX_THLD_SIGNAL_EN;
                struct packed{
                    logic value;
                } RX_THLD_SIGNAL_EN;
                struct packed{
                    logic value;
                } IBI_STATUS_THLD_SIGNAL_EN;
                struct packed{
                    logic value;
                } CMD_QUEUE_READY_SIGNAL_EN;
                struct packed{
                    logic value;
                } RESP_READY_SIGNAL_EN;
                struct packed{
                    logic value;
                } TRANSFER_ABORT_SIGNAL_EN;
                struct packed{
                    logic value;
                } TRANSFER_ERR_SIGNAL_EN;
            } PIO_INTR_SIGNAL_ENABLE;
            struct packed{
                struct packed{
                    logic value;
                } TX_THLD_FORCE;
                struct packed{
                    logic value;
                } RX_THLD_FORCE;
                struct packed{
                    logic value;
                } IBI_THLD_FORCE;
                struct packed{
                    logic value;
                } CMD_QUEUE_READY_FORCE;
                struct packed{
                    logic value;
                } RESP_READY_FORCE;
                struct packed{
                    logic value;
                } TRANSFER_ABORT_FORCE;
                struct packed{
                    logic value;
                } TRANSFER_ERR_FORCE;
            } PIO_INTR_FORCE;
            struct packed{
                struct packed{
                    logic value;
                } ENABLE;
                struct packed{
                    logic value;
                } RS;
                struct packed{
                    logic value;
                } ABORT;
            } PIO_CONTROL;
        } PIOControl;
        struct packed{
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } PROT_CAP_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } PROT_CAP_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } PROT_CAP_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } PROT_CAP_3;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_3;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_4;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_5;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_ID_6;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_STATUS_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_STATUS_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } DEVICE_RESET;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } RECOVERY_CTRL;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } RECOVERY_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } HW_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_CTRL_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_CTRL_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_3;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_4;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_STATUS_5;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } INDIRECT_FIFO_DATA;
            } SecFwRecoveryIf;
            struct packed{
                struct packed{
                    struct packed{
                        logic value;
                    } PENDING_RX_NACK;
                    struct packed{
                        logic value;
                    } HANDOFF_DELAY_NACK;
                    struct packed{
                        logic value;
                    } ACR_FSM_OP_SELECT;
                    struct packed{
                        logic value;
                    } PRIME_ACCEPT_GETACCCR;
                    struct packed{
                        logic value;
                    } HANDOFF_DEEP_SLEEP;
                    struct packed{
                        logic value;
                    } CR_REQUEST_SEND;
                    struct packed{
                        logic [2:0] value;
                    } BAST_CCC_IBI_RING;
                    struct packed{
                        logic value;
                    } TARGET_XACT_ENABLE;
                    struct packed{
                        logic value;
                    } DAA_SETAASA_ENABLE;
                    struct packed{
                        logic value;
                    } DAA_SETDASA_ENABLE;
                    struct packed{
                        logic value;
                    } DAA_ENTDAA_ENABLE;
                    struct packed{
                        logic value;
                    } RSTACT_DEFBYTE_02;
                    struct packed{
                        logic [1:0] value;
                    } STBY_CR_ENABLE_INIT;
                } STBY_CR_CONTROL;
                struct packed{
                    struct packed{
                        logic [6:0] value;
                    } STATIC_ADDR;
                    struct packed{
                        logic value;
                    } STATIC_ADDR_VALID;
                    struct packed{
                        logic [6:0] value;
                    } DYNAMIC_ADDR;
                    struct packed{
                        logic value;
                    } DYNAMIC_ADDR_VALID;
                } STBY_CR_DEVICE_ADDR;
                struct packed{
                    struct packed{
                        logic value;
                    } SIMPLE_CRR_SUPPORT;
                    struct packed{
                        logic value;
                    } TARGET_XACT_SUPPORT;
                    struct packed{
                        logic value;
                    } DAA_SETAASA_SUPPORT;
                    struct packed{
                        logic value;
                    } DAA_SETDASA_SUPPORT;
                    struct packed{
                        logic value;
                    } DAA_ENTDAA_SUPPORT;
                } STBY_CR_CAPABILITIES;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } __rsvd;
                } __rsvd_0;
                struct packed{
                    struct packed{
                        logic value;
                    } AC_CURRENT_OWN;
                    struct packed{
                        logic [2:0] value;
                    } SIMPLE_CRR_STATUS;
                    struct packed{
                        logic value;
                    } HJ_REQ_STATUS;
                } STBY_CR_STATUS;
                struct packed{
                    struct packed{
                        logic [14:0] value;
                    } PID_HI;
                    struct packed{
                        logic [7:0] value;
                    } DCR;
                    struct packed{
                        logic [4:0] value;
                    } BCR_VAR;
                    struct packed{
                        logic [2:0] value;
                    } BCR_FIXED;
                } STBY_CR_DEVICE_CHAR;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PID_LO;
                } STBY_CR_DEVICE_PID_LO;
                struct packed{
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_OK_REMAIN_STAT;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_OK_PRIMED_STAT;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_ERR_FAIL_STAT;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_ERR_M3_STAT;
                    struct packed{
                        logic value;
                    } CRR_RESPONSE_STAT;
                    struct packed{
                        logic value;
                    } STBY_CR_DYN_ADDR_STAT;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_STAT;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_OK_STAT;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_ERR_STAT;
                    struct packed{
                        logic value;
                    } STBY_CR_OP_RSTACT_STAT;
                    struct packed{
                        logic value;
                    } CCC_PARAM_MODIFIED_STAT;
                    struct packed{
                        logic value;
                    } CCC_UNHANDLED_NACK_STAT;
                    struct packed{
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_STAT;
                } STBY_CR_INTR_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } __rsvd;
                } __rsvd_1;
                struct packed{
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } ACR_HANDOFF_ERR_M3_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } CRR_RESPONSE_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } STBY_CR_DYN_ADDR_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_OK_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_ERR_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } STBY_CR_OP_RSTACT_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } CCC_PARAM_MODIFIED_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } CCC_UNHANDLED_NACK_SIGNAL_EN;
                    struct packed{
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
                } STBY_CR_INTR_SIGNAL_ENABLE;
                struct packed{
                    struct packed{
                        logic value;
                    } CRR_RESPONSE_FORCE;
                    struct packed{
                        logic value;
                    } STBY_CR_DYN_ADDR_FORCE;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_FORCE;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_OK_FORCE;
                    struct packed{
                        logic value;
                    } STBY_CR_ACCEPT_ERR_FORCE;
                    struct packed{
                        logic value;
                    } STBY_CR_OP_RSTACT_FORCE;
                    struct packed{
                        logic value;
                    } CCC_PARAM_MODIFIED_FORCE;
                    struct packed{
                        logic value;
                    } CCC_UNHANDLED_NACK_FORCE;
                    struct packed{
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_FORCE;
                } STBY_CR_INTR_FORCE;
                struct packed{
                    struct packed{
                        logic [2:0] value;
                    } F2_CRCAP1_BUS_CONFIG;
                    struct packed{
                        logic [3:0] value;
                    } F2_CRCAP2_DEV_INTERACT;
                } STBY_CR_CCC_CONFIG_GETCAPS;
                struct packed{
                    struct packed{
                        logic [7:0] value;
                    } RST_ACTION;
                    struct packed{
                        logic [7:0] value;
                    } RESET_TIME_PERIPHERAL;
                    struct packed{
                        logic [7:0] value;
                    } RESET_TIME_TARGET;
                    struct packed{
                        logic value;
                    } RESET_DYNAMIC_ADDR;
                } STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } __rsvd;
                } __rsvd_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } __rsvd;
                } __rsvd_3;
            } StdbyCtrlMode;
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } CONTROL;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } STATUS;
                struct packed{
                    struct packed{
                        logic value;
                    } SOFT_RST;
                    struct packed{
                        logic value;
                    } TX_DESC_RST;
                    struct packed{
                        logic value;
                    } RX_DESC_RST;
                    struct packed{
                        logic value;
                    } TX_DATA_RST;
                    struct packed{
                        logic value;
                    } RX_DATA_RST;
                    struct packed{
                        logic value;
                    } IBI_QUEUE_RST;
                } RESET_CONTROL;
                struct packed{
                    struct packed{
                        logic value;
                    } RX_DESC_STAT;
                    struct packed{
                        logic value;
                    } TX_DESC_STAT;
                    struct packed{
                        logic value;
                    } RX_DESC_TIMEOUT;
                    struct packed{
                        logic value;
                    } TX_DESC_TIMEOUT;
                    struct packed{
                        logic value;
                    } TX_DATA_THLD_STAT;
                    struct packed{
                        logic value;
                    } RX_DATA_THLD_STAT;
                    struct packed{
                        logic value;
                    } TX_DESC_THLD_STAT;
                    struct packed{
                        logic value;
                    } RX_DESC_THLD_STAT;
                    struct packed{
                        logic value;
                    } IBI_THLD_STAT;
                    struct packed{
                        logic value;
                    } TRANSFER_ABORT_STAT;
                    struct packed{
                        logic value;
                    } TRANSFER_ERR_STAT;
                } INTERRUPT_STATUS;
                struct packed{
                    struct packed{
                        logic value;
                    } TX_DATA_THLD_STAT_EN;
                    struct packed{
                        logic value;
                    } RX_DATA_THLD_STAT_EN;
                    struct packed{
                        logic value;
                    } TX_DESC_THLD_STAT_EN;
                    struct packed{
                        logic value;
                    } RX_DESC_THLD_STAT_EN;
                    struct packed{
                        logic value;
                    } IBI_THLD_STAT_EN;
                } INTERRUPT_ENABLE;
                struct packed{
                    struct packed{
                        logic value;
                    } TX_DATA_THLD_FORCE;
                    struct packed{
                        logic value;
                    } RX_DATA_THLD_FORCE;
                    struct packed{
                        logic value;
                    } TX_DESC_THLD_FORCE;
                    struct packed{
                        logic value;
                    } RX_DESC_THLD_FORCE;
                    struct packed{
                        logic value;
                    } IBI_THLD_FORCE;
                } INTERRUPT_FORCE;
                struct packed{
                    struct packed{
                        logic [7:0] value;
                    } TX_DESC_THLD;
                    struct packed{
                        logic [7:0] value;
                    } RX_DESC_THLD;
                    struct packed{
                        logic [7:0] value;
                    } IBI_THLD;
                } QUEUE_THLD_CTRL;
                struct packed{
                    struct packed{
                        logic [2:0] value;
                    } TX_DATA_THLD;
                    struct packed{
                        logic [2:0] value;
                    } RX_DATA_THLD;
                    struct packed{
                        logic [2:0] value;
                    } TX_START_THLD;
                    struct packed{
                        logic [2:0] value;
                    } RX_START_THLD;
                } DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct packed{
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_CONTROL;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_STATUS;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_0;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_1;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_3;
                struct packed{
                    struct packed{
                        logic value;
                    } INPUT_ENABLE;
                    struct packed{
                        logic value;
                    } SCHMITT_EN;
                    struct packed{
                        logic value;
                    } KEEPER_EN;
                    struct packed{
                        logic value;
                    } PULL_DIR;
                    struct packed{
                        logic value;
                    } PULL_EN;
                    struct packed{
                        logic value;
                    } IO_INVERSION;
                    struct packed{
                        logic value;
                    } OD_EN;
                    struct packed{
                        logic value;
                    } VIRTUAL_OD_EN;
                    struct packed{
                        logic [7:0] value;
                    } PAD_TYPE;
                } SOC_PAD_CONF;
                struct packed{
                    struct packed{
                        logic [7:0] value;
                    } DRIVE_SLEW_RATE;
                    struct packed{
                        logic [7:0] value;
                    } DRIVE_STRENGTH;
                } SOC_PAD_ATTR;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_2;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_3;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_R;
                } T_R_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_F;
                } T_F_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_SU_DAT;
                } T_SU_DAT_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_HD_DAT;
                } T_HD_DAT_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_HIGH;
                } T_HIGH_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_LOW;
                } T_LOW_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_HD_STA;
                } T_HD_STA_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_SU_STA;
                } T_SU_STA_REG;
                struct packed{
                    struct packed{
                        logic [19:0] value;
                    } T_SU_STO;
                } T_SU_STO_REG;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } T_FREE;
                } T_FREE_REG;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } T_AVAL;
                } T_AVAL_REG;
                struct packed{
                    struct packed{
                        logic [31:0] value;
                    } T_IDLE;
                } T_IDLE_REG;
            } SoCMgmtIf;
            struct packed{
                struct packed{
                    struct packed{
                        logic [1:0] value;
                    } OPERATION_MODE;
                } CONTROLLER_CONFIG;
            } CtrlCfg;
        } I3C_EC;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: I3CCSR.I3CBase.HC_CONTROL.IBA_INCLUDE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.IBA_INCLUDE.next = next_c;
        field_combo.I3CBase.HC_CONTROL.IBA_INCLUDE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.IBA_INCLUDE.load_next) begin
            field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value <= field_combo.I3CBase.HC_CONTROL.IBA_INCLUDE.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.IBA_INCLUDE.value = field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.I2C_DEV_PRESENT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.next = next_c;
        field_combo.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.load_next) begin
            field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value <= field_combo.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value = field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.HOT_JOIN_CTRL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.next = next_c;
        field_combo.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.load_next) begin
            field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value <= field_combo.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value = field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.next = next_c;
        field_combo.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.load_next) begin
            field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value <= field_combo.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value = field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.ABORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.ABORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.ABORT.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.ABORT.next = next_c;
        field_combo.I3CBase.HC_CONTROL.ABORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.ABORT.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.ABORT.load_next) begin
            field_storage.I3CBase.HC_CONTROL.ABORT.value <= field_combo.I3CBase.HC_CONTROL.ABORT.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.ABORT.value = field_storage.I3CBase.HC_CONTROL.ABORT.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.RESUME
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.RESUME.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.HC_CONTROL.RESUME.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.HC_CONTROL.RESUME.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.HC_CONTROL.RESUME.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.RESUME.next = next_c;
        field_combo.I3CBase.HC_CONTROL.RESUME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.RESUME.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.RESUME.load_next) begin
            field_storage.I3CBase.HC_CONTROL.RESUME.value <= field_combo.I3CBase.HC_CONTROL.RESUME.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.RESUME.value = field_storage.I3CBase.HC_CONTROL.RESUME.value;
    // Field: I3CCSR.I3CBase.HC_CONTROL.BUS_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.HC_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.HC_CONTROL.BUS_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.HC_CONTROL.BUS_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.HC_CONTROL.BUS_ENABLE.next = next_c;
        field_combo.I3CBase.HC_CONTROL.BUS_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value <= 1'h0;
        end else if(field_combo.I3CBase.HC_CONTROL.BUS_ENABLE.load_next) begin
            field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value <= field_combo.I3CBase.HC_CONTROL.BUS_ENABLE.next;
        end
    end
    assign hwif_out.I3CBase.HC_CONTROL.BUS_ENABLE.value = field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value;
    // Field: I3CCSR.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value & ~decoded_wr_biten[22:16]) | (decoded_wr_data[22:16] & decoded_wr_biten[22:16]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.next = next_c;
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value <= 7'h0;
        end else if(field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.load_next) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value <= field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.next;
        end
    end
    assign hwif_out.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next = next_c;
        field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value <= 1'h0;
        end else if(field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next) begin
            field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value <= field_combo.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
        end
    end
    assign hwif_out.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value = field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.SOFT_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.SOFT_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.SOFT_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.SOFT_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.SOFT_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.SOFT_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value <= field_combo.I3CBase.RESET_CONTROL.SOFT_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.SOFT_RST.value = field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.CMD_QUEUE_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value <= field_combo.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value = field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.RESP_QUEUE_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value <= field_combo.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value = field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.TX_FIFO_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.TX_FIFO_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.TX_FIFO_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.TX_FIFO_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.TX_FIFO_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.TX_FIFO_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value <= field_combo.I3CBase.RESET_CONTROL.TX_FIFO_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.TX_FIFO_RST.value = field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.RX_FIFO_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.RX_FIFO_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.RX_FIFO_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.RX_FIFO_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.RX_FIFO_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.RX_FIFO_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value <= field_combo.I3CBase.RESET_CONTROL.RX_FIFO_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.RX_FIFO_RST.value = field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value;
    // Field: I3CCSR.I3CBase.RESET_CONTROL.IBI_QUEUE_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.next = next_c;
        field_combo.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value <= 1'h0;
        end else if(field_combo.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.load_next) begin
            field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value <= field_combo.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.next;
        end
    end
    assign hwif_out.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value = field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value | hwif_in.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.next = next_c;
        field_combo.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.load_next) begin
            field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value <= field_combo.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value | hwif_in.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.next = next_c;
        field_combo.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.load_next) begin
            field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value <= field_combo.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value | hwif_in.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.next = next_c;
        field_combo.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.load_next) begin
            field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value <= field_combo.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value | hwif_in.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.next = next_c;
        field_combo.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.load_next) begin
            field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value <= field_combo.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.next;
        end
    end
    // Field: I3CCSR.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.next != '0) begin // stickybit
            next_c = field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value | hwif_in.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.next = next_c;
        field_combo.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.load_next) begin
            field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value <= field_combo.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS.intr =
        |(field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value)
        || |(field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value)
        || |(field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value)
        || |(field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value)
        || |(field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value & field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value);
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value = field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value;
    // Field: I3CCSR.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.next = next_c;
        field_combo.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.load_next) begin
            field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value <= field_combo.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value = field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value;
    // Field: I3CCSR.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.next = next_c;
        field_combo.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.load_next) begin
            field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value <= field_combo.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value = field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.next = next_c;
        field_combo.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.load_next) begin
            field_storage.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value <= field_combo.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value = field_storage.I3CBase.INTR_FORCE.HC_INTERNAL_ERR_FORCE.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.next = next_c;
        field_combo.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.load_next) begin
            field_storage.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value <= field_combo.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value = field_storage.I3CBase.INTR_FORCE.HC_SEQ_CANCEL_FORCE.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.next = next_c;
        field_combo.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.load_next) begin
            field_storage.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value <= field_combo.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value = field_storage.I3CBase.INTR_FORCE.HC_WARN_CMD_SEQ_STALL_FORCE.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.next = next_c;
        field_combo.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.load_next) begin
            field_storage.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value <= field_combo.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value = field_storage.I3CBase.INTR_FORCE.HC_ERR_CMD_SEQ_TIMEOUT_FORCE.value;
    // Field: I3CCSR.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.next = next_c;
        field_combo.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value <= 1'h0;
        end else if(field_combo.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.load_next) begin
            field_storage.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value <= field_combo.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.next;
        end
    end
    assign hwif_out.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value = field_storage.I3CBase.INTR_FORCE.SCHED_CMD_MISSED_TICK_FORCE.value;
    // Field: I3CCSR.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value & ~decoded_wr_biten[23:19]) | (decoded_wr_data[23:19] & decoded_wr_biten[23:19]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.next = next_c;
        field_combo.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value <= 5'h0;
        end else if(field_combo.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.load_next) begin
            field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value <= field_combo.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.next;
        end
    end
    assign hwif_out.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value = field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value;
    // Field: I3CCSR.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.next = next_c;
        field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.load_next) begin
            field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value <= field_combo.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.next;
        end
    end
    assign hwif_out.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value = field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value <= 8'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value & ~decoded_wr_biten[17:16]) | (decoded_wr_data[17:16] & decoded_wr_biten[17:16]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value <= 2'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value & ~decoded_wr_biten[20:18]) | (decoded_wr_data[20:18] & decoded_wr_biten[20:18]);
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value <= 3'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value;
    // Field: I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.we) begin // HW Write - we
            next_c = hwif_in.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.next;
            load_next_c = '1;
        end
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.next = next_c;
        field_combo.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value <= 1'h0;
        end else if(field_combo.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.load_next) begin
            field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value <= field_combo.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.next;
        end
    end
    assign hwif_out.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value = field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value;
    // Field: I3CCSR.I3CBase.DEV_CTX_BASE_LO.BASE_LO
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.DEV_CTX_BASE_LO.BASE_LO.next = next_c;
        field_combo.I3CBase.DEV_CTX_BASE_LO.BASE_LO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value <= 1'h0;
        end else if(field_combo.I3CBase.DEV_CTX_BASE_LO.BASE_LO.load_next) begin
            field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value <= field_combo.I3CBase.DEV_CTX_BASE_LO.BASE_LO.next;
        end
    end
    assign hwif_out.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value = field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value;
    // Field: I3CCSR.I3CBase.DEV_CTX_BASE_HI.BASE_HI
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3CBase.DEV_CTX_BASE_HI.BASE_HI.next = next_c;
        field_combo.I3CBase.DEV_CTX_BASE_HI.BASE_HI.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value <= 1'h0;
        end else if(field_combo.I3CBase.DEV_CTX_BASE_HI.BASE_HI.load_next) begin
            field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value <= field_combo.I3CBase.DEV_CTX_BASE_HI.BASE_HI.next;
        end
    end
    assign hwif_out.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value = field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value;

    assign hwif_out.PIOControl.COMMAND_PORT.req = decoded_req_is_wr ? decoded_reg_strb.PIOControl.COMMAND_PORT : '0;
    assign hwif_out.PIOControl.COMMAND_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.PIOControl.COMMAND_PORT.wr_data = decoded_wr_data;
    assign hwif_out.PIOControl.COMMAND_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.PIOControl.RESPONSE_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.PIOControl.RESPONSE_PORT : '0;
    assign hwif_out.PIOControl.RESPONSE_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.PIOControl.TX_DATA_PORT.req = decoded_req_is_wr ? decoded_reg_strb.PIOControl.TX_DATA_PORT : '0;
    assign hwif_out.PIOControl.TX_DATA_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.PIOControl.TX_DATA_PORT.wr_data = decoded_wr_data;
    assign hwif_out.PIOControl.TX_DATA_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.PIOControl.RX_DATA_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.PIOControl.RX_DATA_PORT : '0;
    assign hwif_out.PIOControl.RX_DATA_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.PIOControl.IBI_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.PIOControl.IBI_PORT : '0;
    assign hwif_out.PIOControl.IBI_PORT.req_is_wr = decoded_req_is_wr;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.we) begin // HW Write - we
            next_c = hwif_in.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value = field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value;
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.swmod = decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.we) begin // HW Write - we
            next_c = hwif_in.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value = field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value;
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.swmod = decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value = field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value;
    // Field: I3CCSR.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.next = next_c;
        field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value <= 8'h1;
        end else if(field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.load_next) begin
            field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value <= field_combo.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.next;
        end
    end
    assign hwif_out.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value = field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value & ~decoded_wr_biten[18:16]) | (decoded_wr_data[18:16] & decoded_wr_biten[18:16]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
    // Field: I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value & ~decoded_wr_biten[26:24]) | (decoded_wr_data[26:24] & decoded_wr_biten[26:24]);
            load_next_c = '1;
        end
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next = next_c;
        field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= 3'h1;
        end else if(field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next) begin
            field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= field_combo.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next;
        end
    end
    assign hwif_out.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value = field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.value;
        load_next_c = '0;
        if(field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value) begin // HW Write - we
            next_c = hwif_in.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.next != '0) begin // stickybit
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value | hwif_in.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.next != '0) begin // stickybit
            next_c = field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value | hwif_in.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value <= field_combo.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_STATUS.intr =
        |(field_storage.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value)
        || |(field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value & field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value);
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.value <= field_combo.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.next = next_c;
        field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.load_next) begin
            field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value <= field_combo.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.next;
        end
    end
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.TX_THLD_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.RX_THLD_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.IBI_THLD_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.CMD_QUEUE_READY_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.RESP_READY_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ABORT_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.next = next_c;
        field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.load_next) begin
            field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value <= field_combo.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value = field_storage.PIOControl.PIO_INTR_FORCE.TRANSFER_ERR_FORCE.value;
    // Field: I3CCSR.PIOControl.PIO_CONTROL.ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.ENABLE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.ENABLE.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_CONTROL.ENABLE.value <= 1'h1;
        end else if(field_combo.PIOControl.PIO_CONTROL.ENABLE.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.ENABLE.value <= field_combo.PIOControl.PIO_CONTROL.ENABLE.next;
        end
    end
    assign hwif_out.PIOControl.PIO_CONTROL.ENABLE.value = field_storage.PIOControl.PIO_CONTROL.ENABLE.value;
    // Field: I3CCSR.PIOControl.PIO_CONTROL.RS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.RS.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.RS.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.RS.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.RS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_CONTROL.RS.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_CONTROL.RS.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.RS.value <= field_combo.PIOControl.PIO_CONTROL.RS.next;
        end
    end
    assign hwif_out.PIOControl.PIO_CONTROL.RS.value = field_storage.PIOControl.PIO_CONTROL.RS.value;
    // Field: I3CCSR.PIOControl.PIO_CONTROL.ABORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.PIOControl.PIO_CONTROL.ABORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.PIOControl.PIO_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.PIOControl.PIO_CONTROL.ABORT.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.PIOControl.PIO_CONTROL.ABORT.next = next_c;
        field_combo.PIOControl.PIO_CONTROL.ABORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.PIOControl.PIO_CONTROL.ABORT.value <= 1'h0;
        end else if(field_combo.PIOControl.PIO_CONTROL.ABORT.load_next) begin
            field_storage.PIOControl.PIO_CONTROL.ABORT.value <= field_combo.PIOControl.PIO_CONTROL.ABORT.next;
        end
    end
    assign hwif_out.PIOControl.PIO_CONTROL.ABORT.value = field_storage.PIOControl.PIO_CONTROL.ABORT.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER.CAP_ID.value = 8'hc0;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER.CAP_LENGTH.value = 16'h20;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value;
    assign hwif_out.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER.CAP_ID.value = 8'h12;
    assign hwif_out.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER.CAP_LENGTH.value = 16'h10;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next;
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value <= 3'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value <= 1'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value & ~decoded_wr_biten[31:30]) | (decoded_wr_data[31:30] & decoded_wr_biten[31:30]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value <= 2'h0;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value & ~decoded_wr_biten[6:0]) | (decoded_wr_data[6:0] & decoded_wr_biten[6:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value & ~decoded_wr_biten[22:16]) | (decoded_wr_data[22:16] & decoded_wr_biten[22:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value <= 1'h1;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value <= 1'h1;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value <= 1'h1;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value <= 1'h1;
        end else if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value <= field_combo.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value & ~decoded_wr_biten[7:5]) | (decoded_wr_data[7:5] & decoded_wr_biten[7:5]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI
    always_comb begin
        automatic logic [14:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value & ~decoded_wr_biten[15:1]) | (decoded_wr_data[15:1] & decoded_wr_biten[15:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value & ~decoded_wr_biten[28:24]) | (decoded_wr_data[28:24] & decoded_wr_biten[28:24]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value & ~decoded_wr_biten[31:29]) | (decoded_wr_data[31:29] & decoded_wr_biten[31:29]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value <= field_combo.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value & ~decoded_wr_biten[11:8]) | (decoded_wr_data[11:8] & decoded_wr_biten[11:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value <= field_combo.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value <= field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value;
    assign hwif_out.I3C_EC.TTI.EXTCAP_HEADER.CAP_ID.value = 8'hc4;
    assign hwif_out.I3C_EC.TTI.EXTCAP_HEADER.CAP_LENGTH.value = 16'h10;
    // Field: I3CCSR.I3C_EC.TTI.CONTROL.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.CONTROL.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.CONTROL.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.CONTROL.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.TTI.CONTROL.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.TTI.CONTROL.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value <= field_combo.I3C_EC.TTI.CONTROL.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.CONTROL.PLACEHOLDER.value = field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.TTI.STATUS.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.STATUS.PLACEHOLDER.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.STATUS.PLACEHOLDER.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.STATUS.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.TTI.STATUS.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.TTI.STATUS.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value <= field_combo.I3C_EC.TTI.STATUS.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.STATUS.PLACEHOLDER.value = field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.SOFT_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.load_next) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value <= 1'h0;
        end else if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.load_next) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value;

    assign hwif_out.I3C_EC.TTI.RX_DESC_QUEUE_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.RX_DESC_QUEUE_PORT : '0;
    assign hwif_out.I3C_EC.TTI.RX_DESC_QUEUE_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.I3C_EC.TTI.RX_DATA_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.RX_DATA_PORT : '0;
    assign hwif_out.I3C_EC.TTI.RX_DATA_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.TX_DESC_QUEUE_PORT : '0;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.TX_DATA_PORT : '0;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.I3C_EC.TTI.IBI_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.IBI_PORT : '0;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.wr_biten = decoded_wr_biten;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.RX_DESC_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.TX_DESC_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.RX_DATA_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.TX_DATA_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.IBI_QUEUE_SIZE.IBI_QUEUE_SIZE.value = 8'h5;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value <= 8'h1;
        end else if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.load_next) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value <= 8'h1;
        end else if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.load_next) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value <= 8'h1;
        end else if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.load_next) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value <= 3'h1;
        end else if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.load_next) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value <= 3'h1;
        end else if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.load_next) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value & ~decoded_wr_biten[18:16]) | (decoded_wr_data[18:16] & decoded_wr_biten[18:16]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= 3'h1;
        end else if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value & ~decoded_wr_biten[26:24]) | (decoded_wr_data[26:24] & decoded_wr_biten[26:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= 3'h1;
        end else if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next;
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
    assign hwif_out.I3C_EC.SoCMgmtIf.EXTCAP_HEADER.CAP_ID.value = 8'hc1;
    assign hwif_out.I3C_EC.SoCMgmtIf.EXTCAP_HEADER.CAP_LENGTH.value = 16'h18;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value <= 1'h1;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value <= 1'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value <= 8'h1;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value <= 8'hf;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value <= 8'hf;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value <= 32'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_R_REG.T_R
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value <= field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value = field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_F_REG.T_F
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value <= field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value = field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value <= field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value = field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value <= field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value = field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value <= field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value = field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value <= field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value = field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value <= 20'h0;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value <= 32'hc;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value <= field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value = field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value <= 32'h12c;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value <= field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value = field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value <= 32'hea60;
        end else if(field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.load_next) begin
            field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value <= field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.next;
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value = field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value;
    assign hwif_out.I3C_EC.CtrlCfg.EXTCAP_HEADER.CAP_ID.value = 8'h2;
    assign hwif_out.I3C_EC.CtrlCfg.EXTCAP_HEADER.CAP_LENGTH.value = 16'h2;
    // Field: I3CCSR.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next = next_c;
        field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value <= 2'h1;
        end else if(field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.load_next) begin
            field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value <= field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next;
        end
    end
    assign hwif_out.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value = field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value;
    assign hwif_out.I3C_EC.TERMINATION_EXTCAP_HEADER.CAP_ID.value = 8'h0;
    assign hwif_out.I3C_EC.TERMINATION_EXTCAP_HEADER.CAP_LENGTH.value = 16'h1;
    assign hwif_out.DAT.req = decoded_reg_strb.DAT;
    assign hwif_out.DAT.addr = decoded_addr[10:0];
    assign hwif_out.DAT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.DAT.wr_data = decoded_wr_data;
    assign hwif_out.DAT.wr_biten = decoded_wr_biten;
    assign hwif_out.DCT.req = decoded_reg_strb.DCT;
    assign hwif_out.DCT.addr = decoded_addr[11:0];
    assign hwif_out.DCT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.DCT.wr_data = decoded_wr_data;
    assign hwif_out.DCT.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.PIOControl.COMMAND_PORT.wr_ack;
        wr_ack |= hwif_in.PIOControl.TX_DATA_PORT.wr_ack;
        wr_ack |= hwif_in.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_ack;
        wr_ack |= hwif_in.I3C_EC.TTI.TX_DATA_PORT.wr_ack;
        wr_ack |= hwif_in.I3C_EC.TTI.IBI_PORT.wr_ack;
        wr_ack |= hwif_in.DAT.wr_ack;
        wr_ack |= hwif_in.DCT.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.PIOControl.RESPONSE_PORT.rd_ack;
        rd_ack |= hwif_in.PIOControl.RX_DATA_PORT.rd_ack;
        rd_ack |= hwif_in.PIOControl.IBI_PORT.rd_ack;
        rd_ack |= hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_ack;
        rd_ack |= hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_ack;
        rd_ack |= hwif_in.DAT.rd_ack;
        rd_ack |= hwif_in.DCT.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [115-1:0][31:0] readback_array;
    assign readback_array[0][31:0] = (decoded_reg_strb.I3CBase.HCI_VERSION && !decoded_req_is_wr) ? 32'h120 : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.IBA_INCLUDE.value : '0;
    assign readback_array[1][2:1] = '0;
    assign readback_array[1][3:3] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[1][4:4] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[1][5:5] = '0;
    assign readback_array[1][6:6] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[1][7:7] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.I2C_DEV_PRESENT.value : '0;
    assign readback_array[1][8:8] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.HOT_JOIN_CTRL.value : '0;
    assign readback_array[1][11:9] = '0;
    assign readback_array[1][12:12] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.HALT_ON_CMD_SEQ_TIMEOUT.value : '0;
    assign readback_array[1][28:13] = '0;
    assign readback_array[1][29:29] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.ABORT.value : '0;
    assign readback_array[1][30:30] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.RESUME.value : '0;
    assign readback_array[1][31:31] = (decoded_reg_strb.I3CBase.HC_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.HC_CONTROL.BUS_ENABLE.value : '0;
    assign readback_array[2][15:0] = '0;
    assign readback_array[2][22:16] = (decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR.value : '0;
    assign readback_array[2][30:23] = '0;
    assign readback_array[2][31:31] = (decoded_reg_strb.I3CBase.CONTROLLER_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3CBase.CONTROLLER_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value : '0;
    assign readback_array[3][1:0] = '0;
    assign readback_array[3][2:2] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][3:3] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][4:4] = '0;
    assign readback_array[3][5:5] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][6:6] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][7:7] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][9:8] = '0;
    assign readback_array[3][10:10] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[3][11:11] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][12:12] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][13:13] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][19:14] = '0;
    assign readback_array[3][21:20] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 2'h0 : '0;
    assign readback_array[3][27:22] = '0;
    assign readback_array[3][28:28] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][29:29] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][30:30] = (decoded_reg_strb.I3CBase.HC_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[3][31:31] = '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.SOFT_RST.value : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.CMD_QUEUE_RST.value : '0;
    assign readback_array[4][2:2] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.RESP_QUEUE_RST.value : '0;
    assign readback_array[4][3:3] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.TX_FIFO_RST.value : '0;
    assign readback_array[4][4:4] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.RX_FIFO_RST.value : '0;
    assign readback_array[4][5:5] = (decoded_reg_strb.I3CBase.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3CBase.RESET_CONTROL.IBI_QUEUE_RST.value : '0;
    assign readback_array[4][31:6] = '0;
    assign readback_array[5][1:0] = '0;
    assign readback_array[5][2:2] = (decoded_reg_strb.I3CBase.PRESENT_STATE && !decoded_req_is_wr) ? hwif_in.I3CBase.PRESENT_STATE.AC_CURRENT_OWN.next : '0;
    assign readback_array[5][31:3] = '0;
    assign readback_array[6][9:0] = '0;
    assign readback_array[6][10:10] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.HC_INTERNAL_ERR_STAT.value : '0;
    assign readback_array[6][11:11] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.HC_SEQ_CANCEL_STAT.value : '0;
    assign readback_array[6][12:12] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.HC_WARN_CMD_SEQ_STALL_STAT.value : '0;
    assign readback_array[6][13:13] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.HC_ERR_CMD_SEQ_TIMEOUT_STAT.value : '0;
    assign readback_array[6][14:14] = (decoded_reg_strb.I3CBase.INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS.SCHED_CMD_MISSED_TICK_STAT.value : '0;
    assign readback_array[6][31:15] = '0;
    assign readback_array[7][9:0] = '0;
    assign readback_array[7][10:10] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.HC_INTERNAL_ERR_STAT_EN.value : '0;
    assign readback_array[7][11:11] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.HC_SEQ_CANCEL_STAT_EN.value : '0;
    assign readback_array[7][12:12] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.HC_WARN_CMD_SEQ_STALL_STAT_EN.value : '0;
    assign readback_array[7][13:13] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_STAT_EN.value : '0;
    assign readback_array[7][14:14] = (decoded_reg_strb.I3CBase.INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_STATUS_ENABLE.SCHED_CMD_MISSED_TICK_STAT_EN.value : '0;
    assign readback_array[7][31:15] = '0;
    assign readback_array[8][9:0] = '0;
    assign readback_array[8][10:10] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_INTERNAL_ERR_SIGNAL_EN.value : '0;
    assign readback_array[8][11:11] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_SEQ_CANCEL_SIGNAL_EN.value : '0;
    assign readback_array[8][12:12] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_WARN_CMD_SEQ_STALL_SIGNAL_EN.value : '0;
    assign readback_array[8][13:13] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.HC_ERR_CMD_SEQ_TIMEOUT_SIGNAL_EN.value : '0;
    assign readback_array[8][14:14] = (decoded_reg_strb.I3CBase.INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3CBase.INTR_SIGNAL_ENABLE.SCHED_CMD_MISSED_TICK_SIGNAL_EN.value : '0;
    assign readback_array[8][31:15] = '0;
    assign readback_array[9][11:0] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 12'h400 : '0;
    assign readback_array[9][18:12] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 7'h7f : '0;
    assign readback_array[9][27:19] = '0;
    assign readback_array[9][31:28] = (decoded_reg_strb.I3CBase.DAT_SECTION_OFFSET && !decoded_req_is_wr) ? 4'h0 : '0;
    assign readback_array[10][11:0] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 12'h800 : '0;
    assign readback_array[10][18:12] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 7'h7f : '0;
    assign readback_array[10][23:19] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? field_storage.I3CBase.DCT_SECTION_OFFSET.TABLE_INDEX.value : '0;
    assign readback_array[10][27:24] = '0;
    assign readback_array[10][31:28] = (decoded_reg_strb.I3CBase.DCT_SECTION_OFFSET && !decoded_req_is_wr) ? 4'h0 : '0;
    assign readback_array[11][15:0] = (decoded_reg_strb.I3CBase.RING_HEADERS_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[11][31:16] = '0;
    assign readback_array[12][15:0] = (decoded_reg_strb.I3CBase.PIO_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h80 : '0;
    assign readback_array[12][31:16] = '0;
    assign readback_array[13][15:0] = (decoded_reg_strb.I3CBase.EXT_CAPS_SECTION_OFFSET && !decoded_req_is_wr) ? 16'h100 : '0;
    assign readback_array[13][31:16] = '0;
    assign readback_array[14][0:0] = (decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[14][15:1] = (decoded_reg_strb.I3CBase.INT_CTRL_CMDS_EN && !decoded_req_is_wr) ? 15'h35 : '0;
    assign readback_array[14][31:16] = '0;
    assign readback_array[15][0:0] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_HJ_REJECTED.value : '0;
    assign readback_array[15][1:1] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_CRR_REJECTED.value : '0;
    assign readback_array[15][2:2] = '0;
    assign readback_array[15][3:3] = (decoded_reg_strb.I3CBase.IBI_NOTIFY_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_NOTIFY_CTRL.NOTIFY_IBI_REJECTED.value : '0;
    assign readback_array[15][31:4] = '0;
    assign readback_array[16][7:0] = '0;
    assign readback_array[16][15:8] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_IBI_ID.value : '0;
    assign readback_array[16][17:16] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.AFTER_N_CHUNKS.value : '0;
    assign readback_array[16][20:18] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.MATCH_STATUS_TYPE.value : '0;
    assign readback_array[16][30:21] = '0;
    assign readback_array[16][31:31] = (decoded_reg_strb.I3CBase.IBI_DATA_ABORT_CTRL && !decoded_req_is_wr) ? field_storage.I3CBase.IBI_DATA_ABORT_CTRL.IBI_DATA_ABORT_MON.value : '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.I3CBase.DEV_CTX_BASE_LO && !decoded_req_is_wr) ? field_storage.I3CBase.DEV_CTX_BASE_LO.BASE_LO.value : '0;
    assign readback_array[17][31:1] = '0;
    assign readback_array[18][0:0] = (decoded_reg_strb.I3CBase.DEV_CTX_BASE_HI && !decoded_req_is_wr) ? field_storage.I3CBase.DEV_CTX_BASE_HI.BASE_HI.value : '0;
    assign readback_array[18][31:1] = '0;
    assign readback_array[19][15:0] = (decoded_reg_strb.I3CBase.DEV_CTX_SG && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[19][30:16] = '0;
    assign readback_array[19][31:31] = (decoded_reg_strb.I3CBase.DEV_CTX_SG && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[20] = hwif_in.PIOControl.RESPONSE_PORT.rd_ack ? hwif_in.PIOControl.RESPONSE_PORT.rd_data : '0;
    assign readback_array[21] = hwif_in.PIOControl.RX_DATA_PORT.rd_ack ? hwif_in.PIOControl.RX_DATA_PORT.rd_data : '0;
    assign readback_array[22] = hwif_in.PIOControl.IBI_PORT.rd_ack ? hwif_in.PIOControl.IBI_PORT.rd_data : '0;
    assign readback_array[23][7:0] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.CMD_EMPTY_BUF_THLD.value : '0;
    assign readback_array[23][15:8] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.RESP_BUF_THLD.value : '0;
    assign readback_array[23][23:16] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_DATA_SEGMENT_SIZE.value : '0;
    assign readback_array[23][31:24] = (decoded_reg_strb.PIOControl.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.QUEUE_THLD_CTRL.IBI_STATUS_THLD.value : '0;
    assign readback_array[24][2:0] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_BUF_THLD.value : '0;
    assign readback_array[24][7:3] = '0;
    assign readback_array[24][10:8] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_BUF_THLD.value : '0;
    assign readback_array[24][15:11] = '0;
    assign readback_array[24][18:16] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value : '0;
    assign readback_array[24][23:19] = '0;
    assign readback_array[24][26:24] = (decoded_reg_strb.PIOControl.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.PIOControl.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value : '0;
    assign readback_array[24][31:27] = '0;
    assign readback_array[25][7:0] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h40 : '0;
    assign readback_array[25][15:8] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h40 : '0;
    assign readback_array[25][23:16] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[25][31:24] = (decoded_reg_strb.PIOControl.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[26][7:0] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 8'h40 : '0;
    assign readback_array[26][23:8] = '0;
    assign readback_array[26][24:24] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[26][27:25] = '0;
    assign readback_array[26][28:28] = (decoded_reg_strb.PIOControl.ALT_QUEUE_SIZE && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[26][31:29] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.TX_THLD_STAT.value : '0;
    assign readback_array[27][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.RX_THLD_STAT.value : '0;
    assign readback_array[27][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.IBI_STATUS_THLD_STAT.value : '0;
    assign readback_array[27][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.CMD_QUEUE_READY_STAT.value : '0;
    assign readback_array[27][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.RESP_READY_STAT.value : '0;
    assign readback_array[27][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ABORT_STAT.value : '0;
    assign readback_array[27][8:6] = '0;
    assign readback_array[27][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS.TRANSFER_ERR_STAT.value : '0;
    assign readback_array[27][31:10] = '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TX_THLD_STAT_EN.value : '0;
    assign readback_array[28][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RX_THLD_STAT_EN.value : '0;
    assign readback_array[28][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.IBI_STATUS_THLD_STAT_EN.value : '0;
    assign readback_array[28][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.CMD_QUEUE_READY_STAT_EN.value : '0;
    assign readback_array[28][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.RESP_READY_STAT_EN.value : '0;
    assign readback_array[28][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ABORT_STAT_EN.value : '0;
    assign readback_array[28][8:6] = '0;
    assign readback_array[28][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_STATUS_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_STATUS_ENABLE.TRANSFER_ERR_STAT_EN.value : '0;
    assign readback_array[28][31:10] = '0;
    assign readback_array[29][0:0] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TX_THLD_SIGNAL_EN.value : '0;
    assign readback_array[29][1:1] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RX_THLD_SIGNAL_EN.value : '0;
    assign readback_array[29][2:2] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.IBI_STATUS_THLD_SIGNAL_EN.value : '0;
    assign readback_array[29][3:3] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.CMD_QUEUE_READY_SIGNAL_EN.value : '0;
    assign readback_array[29][4:4] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.RESP_READY_SIGNAL_EN.value : '0;
    assign readback_array[29][5:5] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ABORT_SIGNAL_EN.value : '0;
    assign readback_array[29][8:6] = '0;
    assign readback_array[29][9:9] = (decoded_reg_strb.PIOControl.PIO_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_INTR_SIGNAL_ENABLE.TRANSFER_ERR_SIGNAL_EN.value : '0;
    assign readback_array[29][31:10] = '0;
    assign readback_array[30][0:0] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.ENABLE.value : '0;
    assign readback_array[30][1:1] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.RS.value : '0;
    assign readback_array[30][2:2] = (decoded_reg_strb.PIOControl.PIO_CONTROL && !decoded_req_is_wr) ? field_storage.PIOControl.PIO_CONTROL.ABORT.value : '0;
    assign readback_array[30][31:3] = '0;
    assign readback_array[31][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc0 : '0;
    assign readback_array[31][23:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h20 : '0;
    assign readback_array[31][31:24] = '0;
    assign readback_array[32][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.PLACEHOLDER.value : '0;
    assign readback_array[33][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.PLACEHOLDER.value : '0;
    assign readback_array[34][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.PLACEHOLDER.value : '0;
    assign readback_array[35][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.PLACEHOLDER.value : '0;
    assign readback_array[36][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.PLACEHOLDER.value : '0;
    assign readback_array[37][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.PLACEHOLDER.value : '0;
    assign readback_array[38][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.PLACEHOLDER.value : '0;
    assign readback_array[39][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.PLACEHOLDER.value : '0;
    assign readback_array[40][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.PLACEHOLDER.value : '0;
    assign readback_array[41][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.PLACEHOLDER.value : '0;
    assign readback_array[42][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_6.PLACEHOLDER.value : '0;
    assign readback_array[43][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PLACEHOLDER.value : '0;
    assign readback_array[44][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.PLACEHOLDER.value : '0;
    assign readback_array[45][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.PLACEHOLDER.value : '0;
    assign readback_array[46][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.PLACEHOLDER.value : '0;
    assign readback_array[47][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.PLACEHOLDER.value : '0;
    assign readback_array[48][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.PLACEHOLDER.value : '0;
    assign readback_array[49][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.PLACEHOLDER.value : '0;
    assign readback_array[50][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.PLACEHOLDER.value : '0;
    assign readback_array[51][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.PLACEHOLDER.value : '0;
    assign readback_array[52][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.PLACEHOLDER.value : '0;
    assign readback_array[53][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.PLACEHOLDER.value : '0;
    assign readback_array[54][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.PLACEHOLDER.value : '0;
    assign readback_array[55][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.PLACEHOLDER.value : '0;
    assign readback_array[56][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_5.PLACEHOLDER.value : '0;
    assign readback_array[57][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.PLACEHOLDER.value : '0;
    assign readback_array[58][7:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h12 : '0;
    assign readback_array[58][23:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h10 : '0;
    assign readback_array[58][31:24] = '0;
    assign readback_array[59][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value : '0;
    assign readback_array[59][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value : '0;
    assign readback_array[59][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value : '0;
    assign readback_array[59][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value : '0;
    assign readback_array[59][4:4] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value : '0;
    assign readback_array[59][5:5] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value : '0;
    assign readback_array[59][7:6] = '0;
    assign readback_array[59][10:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value : '0;
    assign readback_array[59][11:11] = '0;
    assign readback_array[59][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value : '0;
    assign readback_array[59][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value : '0;
    assign readback_array[59][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value : '0;
    assign readback_array[59][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value : '0;
    assign readback_array[59][19:16] = '0;
    assign readback_array[59][20:20] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value : '0;
    assign readback_array[59][29:21] = '0;
    assign readback_array[59][31:30] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value : '0;
    assign readback_array[60][6:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value : '0;
    assign readback_array[60][14:7] = '0;
    assign readback_array[60][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value : '0;
    assign readback_array[60][22:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value : '0;
    assign readback_array[60][30:23] = '0;
    assign readback_array[60][31:31] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value : '0;
    assign readback_array[61][4:0] = '0;
    assign readback_array[61][5:5] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value : '0;
    assign readback_array[61][11:6] = '0;
    assign readback_array[61][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value : '0;
    assign readback_array[61][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value : '0;
    assign readback_array[61][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value : '0;
    assign readback_array[61][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value : '0;
    assign readback_array[61][31:16] = '0;
    assign readback_array[62][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.__rsvd_0.__rsvd.value : '0;
    assign readback_array[63][1:0] = '0;
    assign readback_array[63][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value : '0;
    assign readback_array[63][4:3] = '0;
    assign readback_array[63][7:5] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value : '0;
    assign readback_array[63][8:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value : '0;
    assign readback_array[63][31:9] = '0;
    assign readback_array[64][0:0] = '0;
    assign readback_array[64][15:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value : '0;
    assign readback_array[64][23:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value : '0;
    assign readback_array[64][28:24] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value : '0;
    assign readback_array[64][31:29] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value : '0;
    assign readback_array[65][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value : '0;
    assign readback_array[66][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value : '0;
    assign readback_array[66][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value : '0;
    assign readback_array[66][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value : '0;
    assign readback_array[66][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value : '0;
    assign readback_array[66][9:4] = '0;
    assign readback_array[66][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value : '0;
    assign readback_array[66][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value : '0;
    assign readback_array[66][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value : '0;
    assign readback_array[66][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value : '0;
    assign readback_array[66][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value : '0;
    assign readback_array[66][15:15] = '0;
    assign readback_array[66][16:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value : '0;
    assign readback_array[66][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value : '0;
    assign readback_array[66][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value : '0;
    assign readback_array[66][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value : '0;
    assign readback_array[66][31:20] = '0;
    assign readback_array[67][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.__rsvd_1.__rsvd.value : '0;
    assign readback_array[68][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value : '0;
    assign readback_array[68][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value : '0;
    assign readback_array[68][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value : '0;
    assign readback_array[68][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value : '0;
    assign readback_array[68][9:4] = '0;
    assign readback_array[68][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value : '0;
    assign readback_array[68][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value : '0;
    assign readback_array[68][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value : '0;
    assign readback_array[68][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value : '0;
    assign readback_array[68][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value : '0;
    assign readback_array[68][15:15] = '0;
    assign readback_array[68][16:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value : '0;
    assign readback_array[68][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value : '0;
    assign readback_array[68][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value : '0;
    assign readback_array[68][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value : '0;
    assign readback_array[68][31:20] = '0;
    assign readback_array[69][9:0] = '0;
    assign readback_array[69][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value : '0;
    assign readback_array[69][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value : '0;
    assign readback_array[69][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value : '0;
    assign readback_array[69][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value : '0;
    assign readback_array[69][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value : '0;
    assign readback_array[69][15:15] = '0;
    assign readback_array[69][16:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value : '0;
    assign readback_array[69][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value : '0;
    assign readback_array[69][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value : '0;
    assign readback_array[69][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value : '0;
    assign readback_array[69][31:20] = '0;
    assign readback_array[70][2:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value : '0;
    assign readback_array[70][7:3] = '0;
    assign readback_array[70][11:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value : '0;
    assign readback_array[70][31:12] = '0;
    assign readback_array[71][7:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value : '0;
    assign readback_array[71][15:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value : '0;
    assign readback_array[71][23:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value : '0;
    assign readback_array[71][30:24] = '0;
    assign readback_array[71][31:31] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value : '0;
    assign readback_array[72][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.__rsvd_2.__rsvd.value : '0;
    assign readback_array[73][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value : '0;
    assign readback_array[74][7:0] = (decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc4 : '0;
    assign readback_array[74][23:8] = (decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h10 : '0;
    assign readback_array[74][31:24] = '0;
    assign readback_array[75][31:0] = (decoded_reg_strb.I3C_EC.TTI.CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.CONTROL.PLACEHOLDER.value : '0;
    assign readback_array[76][31:0] = (decoded_reg_strb.I3C_EC.TTI.STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.STATUS.PLACEHOLDER.value : '0;
    assign readback_array[77][0:0] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value : '0;
    assign readback_array[77][1:1] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value : '0;
    assign readback_array[77][2:2] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value : '0;
    assign readback_array[77][3:3] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value : '0;
    assign readback_array[77][4:4] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value : '0;
    assign readback_array[77][5:5] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value : '0;
    assign readback_array[77][31:6] = '0;
    assign readback_array[78][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value : '0;
    assign readback_array[78][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value : '0;
    assign readback_array[78][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value : '0;
    assign readback_array[78][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value : '0;
    assign readback_array[78][7:4] = '0;
    assign readback_array[78][8:8] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value : '0;
    assign readback_array[78][9:9] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value : '0;
    assign readback_array[78][10:10] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value : '0;
    assign readback_array[78][11:11] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value : '0;
    assign readback_array[78][12:12] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value : '0;
    assign readback_array[78][24:13] = '0;
    assign readback_array[78][25:25] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value : '0;
    assign readback_array[78][30:26] = '0;
    assign readback_array[78][31:31] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value : '0;
    assign readback_array[79][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value : '0;
    assign readback_array[79][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value : '0;
    assign readback_array[79][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value : '0;
    assign readback_array[79][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value : '0;
    assign readback_array[79][4:4] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value : '0;
    assign readback_array[79][31:5] = '0;
    assign readback_array[80][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value : '0;
    assign readback_array[80][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value : '0;
    assign readback_array[80][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value : '0;
    assign readback_array[80][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value : '0;
    assign readback_array[80][4:4] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value : '0;
    assign readback_array[80][31:5] = '0;
    assign readback_array[81] = hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_ack ? hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_data : '0;
    assign readback_array[82] = hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_ack ? hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_data : '0;
    assign readback_array[83][7:0] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[83][15:8] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[83][23:16] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[83][31:24] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[84][7:0] = (decoded_reg_strb.I3C_EC.TTI.IBI_QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[84][31:8] = '0;
    assign readback_array[85][7:0] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value : '0;
    assign readback_array[85][15:8] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value : '0;
    assign readback_array[85][23:16] = '0;
    assign readback_array[85][31:24] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value : '0;
    assign readback_array[86][2:0] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value : '0;
    assign readback_array[86][7:3] = '0;
    assign readback_array[86][10:8] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value : '0;
    assign readback_array[86][15:11] = '0;
    assign readback_array[86][18:16] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value : '0;
    assign readback_array[86][23:19] = '0;
    assign readback_array[86][26:24] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value : '0;
    assign readback_array[86][31:27] = '0;
    assign readback_array[87][7:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc1 : '0;
    assign readback_array[87][23:8] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h18 : '0;
    assign readback_array[87][31:24] = '0;
    assign readback_array[88][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value : '0;
    assign readback_array[89][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value : '0;
    assign readback_array[90][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_0.PLACEHOLDER.value : '0;
    assign readback_array[91][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_1.PLACEHOLDER.value : '0;
    assign readback_array[92][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value : '0;
    assign readback_array[93][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value : '0;
    assign readback_array[94][0:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value : '0;
    assign readback_array[94][1:1] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value : '0;
    assign readback_array[94][2:2] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value : '0;
    assign readback_array[94][3:3] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value : '0;
    assign readback_array[94][4:4] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value : '0;
    assign readback_array[94][5:5] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value : '0;
    assign readback_array[94][6:6] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value : '0;
    assign readback_array[94][7:7] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value : '0;
    assign readback_array[94][23:8] = '0;
    assign readback_array[94][31:24] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value : '0;
    assign readback_array[95][7:0] = '0;
    assign readback_array[95][15:8] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value : '0;
    assign readback_array[95][23:16] = '0;
    assign readback_array[95][31:24] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value : '0;
    assign readback_array[96][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value : '0;
    assign readback_array[97][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value : '0;
    assign readback_array[98][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value : '0;
    assign readback_array[98][31:20] = '0;
    assign readback_array[99][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value : '0;
    assign readback_array[99][31:20] = '0;
    assign readback_array[100][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value : '0;
    assign readback_array[100][31:20] = '0;
    assign readback_array[101][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value : '0;
    assign readback_array[101][31:20] = '0;
    assign readback_array[102][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value : '0;
    assign readback_array[102][31:20] = '0;
    assign readback_array[103][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value : '0;
    assign readback_array[103][31:20] = '0;
    assign readback_array[104][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value : '0;
    assign readback_array[104][31:20] = '0;
    assign readback_array[105][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value : '0;
    assign readback_array[105][31:20] = '0;
    assign readback_array[106][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value : '0;
    assign readback_array[106][31:20] = '0;
    assign readback_array[107][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value : '0;
    assign readback_array[108][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value : '0;
    assign readback_array[109][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value : '0;
    assign readback_array[110][7:0] = (decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h2 : '0;
    assign readback_array[110][23:8] = (decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h2 : '0;
    assign readback_array[110][31:24] = '0;
    assign readback_array[111][3:0] = '0;
    assign readback_array[111][5:4] = (decoded_reg_strb.I3C_EC.CtrlCfg.CONTROLLER_CONFIG && !decoded_req_is_wr) ? field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value : '0;
    assign readback_array[111][31:6] = '0;
    assign readback_array[112][7:0] = (decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h0 : '0;
    assign readback_array[112][23:8] = (decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h1 : '0;
    assign readback_array[112][31:24] = '0;
    assign readback_array[113] = hwif_in.DAT.rd_ack ? hwif_in.DAT.rd_data : '0;
    assign readback_array[114] = hwif_in.DCT.rd_ack ? hwif_in.DCT.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<115; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.rst_ni)

endmodule
